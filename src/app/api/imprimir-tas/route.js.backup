// pages/api/imprimir-tas.js - M√âTODO LEGACY QUE SIEMPRE FUNCIONA
export default async function handler(req, res) {
    console.log(`üîó [Legacy-API] ${req.method} /api/imprimir-tas`);
    
    // Manejar CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    // Manejar OPTIONS preflight
    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }
    
    // Health check GET
    if (req.method === 'GET') {
        console.log('üìã [Legacy-API] Health Check solicitado');
        return res.status(200).json({
            success: true,
            servicio: 'TAS Impresion API',
            version: '2.0-legacy',
            metodo: 'VPN',
            vpn_target: '10.10.5.25:9100',
            timestamp: new Date().toISOString()
        });
    }
    
    // Solo procesar POST para impresi√≥n
    if (req.method !== 'POST') {
        return res.status(405).json({
            success: false,
            error: 'M√©todo no permitido',
            metodo_requerido: 'POST'
        });
    }
    
    try {
        console.log('üì¶ [Legacy-API] Datos recibidos:', req.body);
        
        const { ipTAS, datos, config } = req.body;
        
        // IP fija para VPN - usar la IP asignada por OpenVPN
        const targetIP = '2';
        const targetPort = config?.puerto || 9100;
        const tasUrl = `http://${targetIP}:${targetPort}/imprimir`;
        
        console.log(`üéØ [Legacy-API] Conectando via VPN a: ${tasUrl}`);
        console.log('üìã [Legacy-API] Datos a enviar:', datos);
        
        // Realizar petici√≥n al TAS via VPN
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 15000); // 15s timeout
        
        const respuesta = await fetch(tasUrl, {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                'X-Via': 'legacy-vpn-proxy',
                'X-Origin-Server': '10.10.5.222',
                'X-Timestamp': new Date().toISOString()
            },
            body: JSON.stringify(datos),
            signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        if (!respuesta.ok) {
            throw new Error(`TAS VPN respondi√≥ con status ${respuesta.status}`);
        }
        
        const data = await respuesta.json();
        console.log('‚úÖ [Legacy-API] Respuesta exitosa del TAS via VPN:', data);
        
        return res.status(200).json({
            success: true,
            data: data,
            mensaje: 'Impresi√≥n enviada correctamente via VPN',
            via: 'legacy-vpn-proxy',
            targetIP: targetIP,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå [Legacy-API] Error al conectar via VPN:', error.message);
        
        // Determinar tipo de error
        let tipoError = 'unknown';
        let mensaje = 'Error desconocido al imprimir';
        
        if (error.name === 'AbortError') {
            tipoError = 'timeout';
            mensaje = 'Timeout al conectar con TAS via VPN';
        } else if (error.message.includes('ECONNREFUSED')) {
            tipoError = 'connection_refused';
            mensaje = 'TAS no disponible via VPN - verificar conexi√≥n VPN';
        } else if (error.message.includes('fetch')) {
            tipoError = 'network';
            mensaje = 'Error de red al conectar via VPN';
        }
        
        return res.status(500).json({
            success: false,
            error: mensaje,
            detalle: error.message,
            tipo: tipoError,
            via: 'legacy-vpn-proxy-error',
            instrucciones: {
                timeout: 'Verificar que TAS est√© corriendo y VPN conectada',
                connection_refused: 'Verificar IP VPN del TAS y puerto 9100',
                network: 'Verificar conectividad de red y configuraci√≥n VPN'
            }[tipoError] || 'Contactar soporte t√©cnico'
        });
    }
}